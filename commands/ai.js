const axios = require('axios');
const moment = require('moment-timezone');
const { sendMessage } = require('../handles/sendMessage');

const formatResponse = (text) => {
  const charMap = {
    'A': 'ùòà', 'B': 'ùòâ', 'C': 'ùòä', 'D': 'ùòã', 'E': 'ùòå', 
    'F': 'ùòç', 'G': 'ùòé', 'H': 'ùòè', 'I': 'ùòê', 'J': 'ùòë',
    'K': 'ùòí', 'L': 'ùòì', 'M': 'ùòî', 'N': 'ùòï', 'O': 'ùòñ',
    'P': 'ùòó', 'Q': 'ùòò', 'R': 'ùòô', 'S': 'ùòö', 'T': 'ùòõ',
    'U': 'ùòú', 'V': 'ùòù', 'W': 'ùòû', 'X': 'ùòü', 'Y': 'ùò†',
    'Z': 'ùò°',
    'a': 'ùò¢', 'b': 'ùò£', 'c': 'ùò§', 'd': 'ùò•', 'e': 'ùò¶',
    'f': 'ùòß', 'g': 'ùò®', 'h': 'ùò©', 'i': 'ùò™', 'j': 'ùò´',
    'k': 'ùò¨', 'l': 'ùò≠', 'm': 'ùòÆ', 'n': 'ùòØ', 'o': 'ùò∞',
    'p': 'ùò±', 'q': 'ùò≤', 'r': 'ùò≥', 's': 'ùò¥', 't': 'ùòµ',
    'u': 'ùò∂', 'v': 'ùò∑', 'w': 'ùò∏', 'x': 'ùòπ', 'y': 'ùò∫',
    'z': 'ùòª'
  };
  return text.split('').map(char => charMap[char] || char).join('');
};

const getImageUrl = async (event, token) => {
  const mid = event?.message?.reply_to?.mid || event?.message?.mid;
  if (!mid) return null;
  try {
    const { data } = await axios.get(`https://graph.facebook.com/v22.0/${mid}/attachments`, {
      params: { access_token: token },
      timeout: 10000 
    });
    return data?.data?.[0]?.image_data?.url || data?.data?.[0]?.file_url || null;
  } catch (err) {
    console.error("Erreur r√©cup√©ration URL image:", err?.response?.data || err.message); 
    return null;
  }
};

const getImageBase64 = async (imageUrl) => {
  try {
    const headResponse = await axios.head(imageUrl, { timeout: 5000 });
    const contentLength = parseInt(headResponse.headers['content-length'] || '0', 10);
    if (contentLength > 15 * 1024 * 1024) return null; 
    const response = await axios.get(imageUrl, { responseType: 'arraybuffer', timeout: 15000 }); 
    const base64 = Buffer.from(response.data).toString('base64');
    return `data:image/jpeg;base64,${base64}`;
  } catch (err) {
    console.error("Erreur conversion image base64:", err.message); 
    return null;
  }
};

const getCurrentDateTime = (timezone = 'Africa/Lagos') => {
  const dt = moment().tz(timezone);
  return `${dt.format('DD MMMM YYYY, HH:mm')} ${dt.zoneAbbr()}`;
};

const getUserName = async (senderId, pageAccessToken) => {
  try {
    const { data } = await axios.get(`https://graph.facebook.com/v22.0/${senderId}`, {
      params: { access_token: pageAccessToken, fields: 'name' },
      timeout: 10000 
    });
    return data.name || 'Utilisateur anonyme';
  } catch (err) {
    console.error("Erreur r√©cup√©ration nom user:", err?.response?.data || err.message); 
    return 'Utilisateur anonyme';
  }
};

const conversationHistory = {};
const userData = {};

module.exports = {
  name: 'ai',
  description: 'Interagir avec Messe IA via des questions textuelles ou des images',
  usage: 'Pose une question ou r√©ponds √† une image avec une question.',
  author: 'Messie Osango',
  async execute(senderId, args, pageAccessToken, event) {
    let query = args.join(' ').trim() || 'Hello';
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'AIzaSyBQeZVi4QdrnGKPEfXXx1tdIqlMM8iqvZw';
    const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

    try {
      if (!pageAccessToken) {
        await sendMessage(senderId, { text: formatResponse('Erreur : token d‚Äôacc√®s manquant. Contacte Messie Osango.') }, process.env.PAGE_ACCESS_TOKEN || pageAccessToken);
        return;
      }
      if (!senderId) {
        await sendMessage(senderId, { text: formatResponse('Erreur : ID utilisateur manquant.') }, pageAccessToken);
        return;
      }
      if (!GEMINI_API_KEY) {
        await sendMessage(senderId, { text: formatResponse('Erreur : cl√© API Gemini manquante. Contacte Messie Osango.') }, pageAccessToken);
        return;
      }
      
      if (!conversationHistory[senderId]) conversationHistory[senderId] = [];
      if (!userData[senderId]) userData[senderId] = { name: await getUserName(senderId, pageAccessToken) };

      const imageUrl = await getImageUrl(event, pageAccessToken);
      if (imageUrl) {
        const imageBase64 = await getImageBase64(imageUrl);
        if (!imageBase64) {
          await sendMessage(senderId, { text: formatResponse('Erreur : impossible de lire l‚Äôimage (peut-√™tre trop lourde, max 15 Mo). R√©essaie.') }, pageAccessToken);
          return;
        }
        const geminiPrompt = `Tu es Messe IA, cr√©√©e par Messie Osango. Analyse pr√©cis√©ment cette image et r√©ponds √† la question suivante en fran√ßais : "${query}". Fournis une r√©ponse concise et professionnelle (50-100 mots max).`;
        const geminiPayload = {
          contents: [{
            parts: [
              { text: geminiPrompt },
              { inlineData: { mimeType: 'image/jpeg', data: imageBase64.split(',')[1] } }
            ]
          }]
        };
        let geminiResponse;
        for (let attempt = 0; attempt < 2; attempt++) {
          try {
            geminiResponse = await axios.post(
              GEMINI_API_URL,
              geminiPayload,
              { headers: { 'Content-Type': 'application/json' }, params: { key: GEMINI_API_KEY }, timeout: 60000 }
            );
            break;
          } catch (err) {
            if (attempt === 1) {
              await sendMessage(senderId, { text: formatResponse('Erreur : impossible d‚Äôanalyser l‚Äôimage apr√®s plusieurs tentatives. R√©essaie ou contacte Messie Osango.') }, pageAccessToken);
              return;
            }
          }
        }
        const answer = geminiResponse?.data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || 'Erreur : pas de r√©ponse pour l‚Äôimage.';
        conversationHistory[senderId].push({ role: 'user', content: query });
        conversationHistory[senderId].push({ role: 'assistant', content: answer });
        const chunkMessage = (message, maxLength) => {
          const chunks = [];
          for (let i = 0; i < message.length; i += maxLength) chunks.push(message.slice(i, i + maxLength));
          return chunks;
        };
        const messageChunks = chunkMessage(formatResponse(answer), 1900);
        for (const chunk of messageChunks) {
          await sendMessage(senderId, { text: chunk }, pageAccessToken);
        }
        return;
      }

      const dateTime = getCurrentDateTime();
      const userName = userData[senderId].name;
      const conversationHistoryString = conversationHistory[senderId].map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`).join('\n');
      conversationHistory[senderId].push({ role: 'user', content: query });
      const prompt = `Tu t‚Äô appelles Messe IA, une IA cr√©√©e par Messie Osango, con√ßue pour r√©pondre avec pr√©cision en te basant uniquement sur tes connaissances internes, sans aucune recherche web. Voici la date et l‚Äôheure ${dateTime}. Voici le nom de l‚Äôuser : ${userName}. Pour les questions sur l‚Äôheure dans d‚Äôautres pays, utilise les fuseaux horaires appropri√©s (ex. : Japon = JST, UTC+9; France = CEST, UTC+2). Voici l‚Äôhistorique de la conversation : ${conversationHistoryString}. Analyse l'input suivant : "${query}".

1. Si l'input est une salutation, un message vague, ou non pertinent (ex. : "salut", "yo", "√ßa va", phrases courtes sans question claire), r√©ponds sans faire de recherches.".
2. Si l'input est une question claire et que tu peux r√©pondre pr√©cis√©ment avec tes connaissances internes, fournis une r√©ponse concise, professionnelle et directe (50-100 mots max) en fran√ßais. Pour les questions sur l‚Äôheure, donne la r√©ponse exacte bas√©e sur le fuseau horaire demand√©.
3. Si l'input est une question mais que tu n'as pas l'information, que tu n'es pas s√ªr, ou que la question n√©cessite des donn√©es r√©centes (ex. : actualit√©s, sorties d'anime, √©v√©nements apr√®s avril 2025), renvoie exactement : "Recherche en cours ${query}" sans aucune autre r√©ponse.

Ne fais jamais de recherche web. R√©ponds toujours en fran√ßais. Respecte strictement ces instructions et utilise "Recherche en cours" uniquement pour les cas sp√©cifi√©s.`;
      const llamaResponse = await axios.post(
        'https://uchiha-perdu-ia-five.vercel.app/api',
        { prompt },
        { headers: { 'Content-Type': 'application/json' }, timeout: 30000 }
      );
      let answer = llamaResponse.data.response || 'Erreur : pas de r√©ponse de Llama.';
      if (answer.startsWith('Recherche en cours')) {
        const searchResponse = await axios.post(
          'https://uchiha-perdu-search-api.vercel.app/search',
          { query },
          { headers: { 'Content-Type': 'application/json' }, timeout: 30000 }
        );
        answer = searchResponse.data.response || 'Erreur : pas de r√©ponse de recherche.';
      }
      conversationHistory[senderId].push({ role: 'assistant', content: answer });
      const chunkMessage = (message, maxLength) => {
        const chunks = [];
        for (let i = 0; i < message.length; i += maxLength) chunks.push(message.slice(i, i + maxLength));
        return chunks;
      };
      const messageChunks = chunkMessage(formatResponse(answer), 1900);
      for (const chunk of messageChunks) {
        await sendMessage(senderId, { text: chunk }, pageAccessToken);
      }
    } catch (err) {
      console.error('Erreur:', err.message, err.response?.data); 
      await sendMessage(senderId, { text: formatResponse('Oups, erreur serveur ! R√©essaie ou contacte Messie Osango. üòÖ') }, pageAccessToken);
    }
  },
};
