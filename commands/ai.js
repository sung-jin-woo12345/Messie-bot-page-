const axios = require('axios');
const moment = require('moment-timezone');
const { sendMessage } = require('../handles/sendMessage');

const getImageUrl = async (event) => {
  try {
    if (!event || !event.message || !event.message.attachments || !event.message.attachments[0]) return null;
    const attachment = event.message.attachments[0];
    if (attachment.type !== 'image' || !attachment.payload || !attachment.payload.url) return null;
    return attachment.payload.url;
  } catch (err) {
    return null;
  }
};

const getImageBase64 = async (imageUrl) => {
  try {
    const headResponse = await axios.head(imageUrl, { timeout: 5000 });
    const contentLength = parseInt(headResponse.headers['content-length'] || '0', 10);
    if (contentLength > 15 * 1024 * 1024) return null;
    const response = await axios.get(imageUrl, { responseType: 'arraybuffer', timeout: 15000 });
    const base64 = Buffer.from(response.data, 'binary').toString('base64');
    return { base64, mimeType: 'image/jpeg' };
  } catch (err) {
    return null;
  }
};

const getCurrentDateTime = (timezone = 'Africa/Lagos') => {
  const dt = moment().tz(timezone);
  return `${dt.format('DD MMMM YYYY, HH:mm')} ${dt.zoneAbbr()}`;
};

const getUserName = async (senderId, pageAccessToken) => {
  try {
    const { data } = await axios.get(`https://graph.facebook.com/v22.0/${senderId}`, {
      params: { access_token: pageAccessToken, fields: 'name' },
      timeout: 10000
    });
    return data.name || 'Utilisateur anonyme';
  } catch (err) {
    return 'Utilisateur anonyme';
  }
};

const normalToTypewriter = {
  'A': 'ùô∞', 'B': 'ùô±', 'C': 'ùô≤', 'D': 'ùô≥', 'E': 'ùô¥', 'F': 'ùôµ', 'G': 'ùô∂', 'H': 'ùô∑', 'I': 'ùô∏', 'J': 'ùôπ', 'K': 'ùô∫', 'L': 'ùôª', 'M': 'ùôº', 'N': 'ùôΩ', 'O': 'ùôæ', 'P': 'ùôø', 'Q': 'ùöÄ', 'R': 'ùöÅ', 'S': 'ùöÇ', 'T': 'ùöÉ', 'U': 'ùöÑ', 'V': 'ùöÖ', 'W': 'ùöÜ', 'X': 'ùöá', 'Y': 'ùöà', 'Z': 'ùöâ',
  'a': 'ùöä', 'b': 'ùöã', 'c': 'ùöå', 'd': 'ùöç', 'e': 'ùöé', 'f': 'ùöè', 'g': 'ùöê', 'h': 'ùöë', 'i': 'ùöí', 'j': 'ùöì', 'k': 'ùöî', 'l': 'ùöï', 'm': 'ùöñ', 'n': 'ùöó', 'o': 'ùöò', 'p': 'ùöô', 'q': 'ùöö', 'r': 'ùöõ', 's': 'ùöú', 't': 'ùöù', 'u': 'ùöû', 'v': 'ùöü', 'w': 'ùö†', 'x': 'ùö°', 'y': 'ùö¢', 'z': 'ùö£'
};

const normalToBold = {
  'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö', 'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°', 'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®', 'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
  'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥', 'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª', 'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ', 'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
};

const normalToItalic = {
  'A': 'ùë®', 'B': 'ùë©', 'C': 'ùë™', 'D': 'ùë´', 'E': 'ùë¨', 'F': 'ùë≠', 'G': 'ùëÆ', 'H': 'ùëØ', 'I': 'ùë∞', 'J': 'ùë±', 'K': 'ùë≤', 'L': 'ùë≥', 'M': 'ùë¥', 'N': 'ùëµ', 'O': 'ùë∂', 'P': 'ùë∑', 'Q': 'ùë∏', 'R': 'ùëπ', 'S': 'ùë∫', 'T': 'ùëª', 'U': 'ùëº', 'V': 'ùëΩ', 'W': 'ùëæ', 'X': 'ùëø', 'Y': 'ùíÄ', 'Z': 'ùíÅ',
  'a': 'ùíÇ', 'b': 'ùíÉ', 'c': 'ùíÑ', 'd': 'ùíÖ', 'e': 'ùíÜ', 'f': 'ùíá', 'g': 'ùíà', 'h': 'ùíâ', 'i': 'ùíä', 'j': 'ùíã', 'k': 'ùíå', 'l': 'ùíç', 'm': 'ùíé', 'n': 'ùíè', 'o': 'ùíê', 'p': 'ùíë', 'q': 'ùíí', 'r': 'ùíì', 's': 'ùíî', 't': 'ùíï', 'u': 'ùíñ', 'v': 'ùíó', 'w': 'ùíò', 'x': 'ùíô', 'y': 'ùíö', 'z': 'ùíõ'
};

const transformText = (text, isIAResponse = false) => {
  let transformed = text;
  if (isIAResponse) {
    transformed = transformed.split('').map(char => normalToTypewriter[char] || char).join('');
  } else {
    transformed = transformed.replace(/\*\*(.*?)\*\*/g, (match, p1) => {
      return p1.split('').map(char => normalToBold[char] || char).join('');
    });
    transformed = transformed.replace(/(\*|_)(.*?)\1/g, (match, p1, p2) => {
      return p2.split('').map(char => normalToItalic[char] || char).join('');
    });
    transformed = transformed.split('').map(char => normalToBold[char] || char).join('');
  }
  return transformed;
};

const estimateTokens = (text) => {
  return Math.ceil(text.length / 4);
};

const conversationHistory = {};
const userData = {};
const persistentNames = {};

const extractName = (query, senderId) => {
  const namePatterns = [
    /je m['‚Äô]appelle\s+([A-Za-z√Ä-√ø\s]+)/i,
    /je me nomme\s+([A-Za-z√Ä-√ø\s]+)/i
  ];
  for (const pattern of namePatterns) {
    const match = query.match(pattern);
    if (match && match[1]) {
      const name = match[1].trim();
      persistentNames[senderId] = name;
      return name;
    }
  }
  return null;
};

module.exports = {
  name: 'ai',
  description: 'Interagir avec Messe IA via des questions textuelles ou des images',
  usage: 'Pose une question ou r√©ponds √† une image avec une question.',
  author: 'Messie Osango',
  async execute(senderId, args, pageAccessToken, event) {
    let query = args.join(' ').trim() || 'Hello';
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'AIzaSyDVOtXtSag-ggdYL62eo4pLZjSwpJ9npcY';
    const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
    try {
      if (!pageAccessToken) {
        await sendMessage(senderId, { text: transformText('Erreur : token d‚Äôacc√®s manquant. Contacte Messie Osango.') }, process.env.PAGE_ACCESS_TOKEN || pageAccessToken);
        return;
      }
      if (!senderId) {
        await sendMessage(senderId, { text: transformText('Erreur : ID utilisateur manquant.') }, pageAccessToken);
        return;
      }
      if (!GEMINI_API_KEY) {
        await sendMessage(senderId, { text: transformText('Erreur : cl√© API Gemini manquante. Contacte Messie Osango.') }, pageAccessToken);
        return;
      }
      if (!conversationHistory[senderId]) conversationHistory[senderId] = [];
      if (!userData[senderId]) userData[senderId] = { name: await getUserName(senderId, pageAccessToken) };
      if (!persistentNames[senderId]) {
        const extractedName = extractName(query, senderId);
        if (extractedName) {
          userData[senderId].name = extractedName;
        }
      }
      const historyString = conversationHistory[senderId].map(msg => `${msg.role}: ${msg.content}`).join('\n');
      const historyTokens = estimateTokens(historyString);
      if (historyTokens > 10000) {
        conversationHistory[senderId] = [];
      }
      const imageUrl = await getImageUrl(event);
      if (imageUrl) {
        const imageData = await getImageBase64(imageUrl);
        if (!imageData) {
          await sendMessage(senderId, { text: transformText('Erreur : impossible de lire l‚Äôimage (max 15 Mo ou format invalide). R√©essaie.') }, pageAccessToken);
          return;
        }
        const geminiPrompt = transformText(`Tu es Messe IA, cr√©√©e par Messie Osango. Analyse pr√©cis√©ment cette image et r√©ponds √† la question suivante en fran√ßais : "${query}". Fournis une r√©ponse concise et professionnelle.`);
        const geminiPayload = {
          contents: [{
            parts: [
              { text: geminiPrompt },
              { inline_data: { mime_type: imageData.mimeType, data: imageData.base64 } }
            ]
          }]
        };
        let geminiResponse;
        for (let attempt = 0; attempt < 2; attempt++) {
          try {
            geminiResponse = await axios.post(
              GEMINI_API_URL,
              geminiPayload,
              { headers: { 'Content-Type': 'application/json' }, params: { key: GEMINI_API_KEY }, timeout: 60000 }
            );
            break;
          } catch (err) {
            if (attempt === 1) {
              await sendMessage(senderId, { text: transformText('Erreur : impossible d‚Äôanalyser l‚Äôimage apr√®s plusieurs tentatives. R√©essaie ou contacte Messie Osango.') }, pageAccessToken);
              return;
            }
          }
        }
        const answer = transformText(geminiResponse?.data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || 'Erreur : pas de r√©ponse pour l‚Äôimage.', true);
        conversationHistory[senderId].push({ role: 'user', content: query });
        conversationHistory[senderId].push({ role: 'assistant', content: answer });
        const chunkMessage = (message, maxLength) => {
          const chunks = [];
          for (let i = 0; i < message.length; i += maxLength) chunks.push(message.slice(i, i + maxLength));
          return chunks;
        };
        const messageChunks = chunkMessage(answer, 1900);
        for (const chunk of messageChunks) {
          await sendMessage(senderId, { text: chunk }, pageAccessToken);
        }
        return;
      }
      const dateTime = getCurrentDateTime();
      const userName = persistentNames[senderId] || userData[senderId].name;
      const conversationHistoryString = conversationHistory[senderId].map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`).join('\n');
      conversationHistory[senderId].push({ role: 'user', content: query });
      const prompt = transformText(`Tu t‚Äôappelles Messe IA, une IA cr√©√©e par un g√©nie Messie Osango, con√ßue pour r√©pondre avec pr√©cision en te basant uniquement sur tes connaissances internes, sans recherche web initiale. Voici la date et l‚Äôheure actuelles : ${dateTime}. Voici le nom de l‚Äôuser : ${userName}. Pour les questions sur l‚Äôheure dans d‚Äôautres pays, utilise les fuseaux horaires appropri√©s (ex. : Japon = JST, UTC+9; France = CEST, UTC+2). Voici l‚Äôhistorique de la conversation : ${conversationHistoryString}. Utilise cet historique pour r√©pondre de mani√®re fluide, coh√©rente et continue, en maintenant le contexte des √©changes pr√©c√©dents sans r√©p√©ter inutilement les instructions ou consignes. Analyse l'input suivant : "${query}".

1. Si l'input est une salutation, un message vague ou non pertinent (ex. : "salut", "yo", "√ßa va"), r√©ponds directement sans recherche, de mani√®re concise.
2. Si l'input est une question claire et que tu peux r√©pondre pr√©cis√©ment avec tes connaissances internes, fournis une r√©ponse concise, professionnelle et directe (50-100 mots max) en fran√ßais. Pour les questions sur l‚Äôheure, donne la r√©ponse exacte bas√©e sur le fuseau horaire demand√©.
3. Si l'input est une question n√©cessitant des donn√©es r√©centes (post√©rieures √† avril 2025), ou si tu n‚Äôas pas l‚Äôinformation exacte, renvoie exactement : "Recherche en cours ${query}" sans autre r√©ponse.

Ne fais jamais de recherche web initiale. R√©ponds toujours en fran√ßais. Respecte strictement ces instructions et utilise "Recherche en cours" uniquement pour les cas sp√©cifi√©s. √âvite de r√©p√©ter les instructions ou consignes dans tes r√©ponses.`);
      const llamaResponse = await axios.post(
        'https://uchiha-perdu-ia-five.vercel.app/api',
        { prompt },
        { headers: { 'Content-Type': 'application/json' }, timeout: 30000 }
      );
      let answer = llamaResponse.data.response || 'Erreur : pas de r√©ponse de Llama.';
      if (answer.startsWith('Recherche en cours')) {
        const searchResponse = await axios.post(
          'https://uchiha-perdu-search-api.vercel.app/search',
          { query },
          { headers: { 'Content-Type': 'application/json' }, timeout: 30000 }
        );
        answer = searchResponse.data.response || 'Erreur : pas de r√©ponse de recherche.';
      }
      answer = transformText(answer, true);
      conversationHistory[senderId].push({ role: 'assistant', content: answer });
      const chunkMessage = (message, maxLength) => {
        const chunks = [];
        for (let i = 0; i < message.length; i += maxLength) chunks.push(message.slice(i, i + maxLength));
        return chunks;
      };
      const messageChunks = chunkMessage(answer, 1900);
      for (const chunk of messageChunks) {
        await sendMessage(senderId, { text: chunk }, pageAccessToken);
      }
    } catch (err) {
      await sendMessage(senderId, { text: transformText('Oups, erreur serveur ! R√©essaie ou contacte Messie Osango. üòÖ') }, pageAccessToken);
    }
  },
};
